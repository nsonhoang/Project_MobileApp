
package com.example.projecttest.screen

import android.content.Intent
import android.os.Bundle
import android.util.Log
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import androidx.fragment.app.Fragment
import androidx.recyclerview.widget.LinearLayoutManager
import com.example.projecttest.R
import com.example.projecttest.data.KieuBaiTap
import com.example.projecttest.data.WorkoutProgram
import com.example.projecttest.databinding.FragmentHomeBinding
import com.example.projecttest.screen.adapter.OnItemClickListener
import com.example.projecttest.screen.adapter.WorkoutAdapter
import com.example.projecttest.screen.adapter.WorkoutProgramAdapter
import com.example.projecttest.screen.courses.Courses
import com.example.projecttest.model.UserSummaryViewModel
import androidx.fragment.app.viewModels
import androidx.lifecycle.ViewModelProvider
import androidx.lifecycle.lifecycleScope
import com.example.projecttest.data.Course
import com.example.projecttest.viewmodel.CourseViewModel
import kotlinx.coroutines.launch

class Home : Fragment(), OnItemClickListener {

    private lateinit var binding: FragmentHomeBinding
    private lateinit var twAdapter: WorkoutAdapter
    private lateinit var wpAdapter: WorkoutProgramAdapter
    private val userSummaryViewModel: UserSummaryViewModel by viewModels()
    private lateinit var courseViewModel: CourseViewModel


    override fun onCreateView(
        inflater: LayoutInflater, container: ViewGroup?,
        savedInstanceState: Bundle?
    ): View {
        binding = FragmentHomeBinding.inflate(inflater, container, false)


        courseViewModel = ViewModelProvider(this).get(CourseViewModel::class.java) // g·ªçi viewModel

        lifecycleScope.launch {
            try {
                courseViewModel.fetchDataListHome() // l·∫•y d·ªØ li·ªáu

                courseViewModel.trainingProgramListHome.collect {

                        createItemListHome(it) /// h√†m s·ª≠a l√≠ vi·ªác in danh s√°ch ra
                }


            }catch (e: Exception) {
                // X·ª≠ l√Ω l·ªói ·ªü ƒë√¢y
                println("Error: ${e.message}")
            }
        }

        val workoutPrograms = listOf(
            WorkoutProgram("To√†n th√¢n th·ª≠ th√°ch 7x4", 50, R.drawable.workout1),
            WorkoutProgram("Th·ª≠ th√°ch c∆° b·ª•ng", 30, R.drawable.workout2),
        )

//        val workoutList = listOf(
//            KieuBaiTap("B·ª•ng ng∆∞·ªùi b·∫Øt ƒë·∫ßu", "20 PH√öT", "16 B√†i T·∫≠p", R.drawable.bungnewbie, "Ng∆∞·ªùi b·∫Øt ƒë·∫ßu"),
//            KieuBaiTap("Ng·ª±c ng∆∞·ªùi b·∫Øt ƒë·∫ßu", "9 PH√öT", "11 B√†i T·∫≠p", R.drawable.ngucnewbie, "Ng∆∞·ªùi b·∫Øt ƒë·∫ßu"),
//            KieuBaiTap("C√°nh tay ng∆∞·ªùi b·∫Øt ƒë·∫ßu", "17 PH√öT", "19 B√†i T·∫≠p", R.drawable.taynewbie, "Ng∆∞·ªùi b·∫Øt ƒë·∫ßu"),
//            KieuBaiTap("Ch√¢n ng∆∞·ªùi b·∫Øt ƒë·∫ßu", "26 PH√öT", "23 B√†i T·∫≠p", R.drawable.channewbie, "Ng∆∞·ªùi b·∫Øt ƒë·∫ßu"),
//            KieuBaiTap("B·ª•ng trung b√¨nh", "22 PH√öT", "12 B√†i T·∫≠p", R.drawable.bungavg, "Trung b√¨nh"),
//            KieuBaiTap("Ng·ª±c trung b√¨nh", "11 PH√öT", "14 B√†i T·∫≠p", R.drawable.ngucavg, "Trung b√¨nh"),
//            KieuBaiTap("C√°nh tay trung b√¨nh", "19 PH√öT", "12 B√†i T·∫≠p", R.drawable.tayavg, "Trung b√¨nh"),
//            KieuBaiTap("Ch√¢n trung b√¨nh", "28 PH√öT", "14 B√†i T·∫≠p", R.drawable.chanavg, "Trung b√¨nh"),
//            KieuBaiTap("B·ª•ng n√¢ng cao", "25 PH√öT", "18 B√†i T·∫≠p", R.drawable.bunghight, "N√¢ng cao"),
//            KieuBaiTap("Ng·ª±c n√¢ng cao", "13 PH√öT", "15 B√†i T·∫≠p", R.drawable.nguchight, "N√¢ng cao"),
//            KieuBaiTap("C√°nh tay n√¢ng cao", "21 PH√öT", "23 B√†i T·∫≠p", R.drawable.tayhight, "N√¢ng cao"),
//            KieuBaiTap("Ch√¢n n√¢ng cao", "30 PH√öT", "27 B√†i T·∫≠p", R.drawable.chanhight, "N√¢ng cao")
//        )
        userSummaryViewModel.fetchUserSummary("CmdNGAdOkVaFqdVHD9ISsbPCZHa2")
        // Truy·ªÅn s·ª± ki·ªán click v√†o Adapter

        wpAdapter = WorkoutProgramAdapter(workoutPrograms) { selectedProgram ->
            Log.d("HomeFragment", "ƒê√£ nh·∫•n v√†o: ${selectedProgram.tenbaitap}")
            val intent = Intent(requireContext(), Courses::class.java).apply {
                putExtra("PROGRAM_NAME", selectedProgram.tenbaitap)
            }
            startActivity(intent)
        }

        binding.rvWorkPrograms.apply {
            layoutManager = LinearLayoutManager(requireContext(), LinearLayoutManager.HORIZONTAL, false)
            adapter = wpAdapter
        }

        wpAdapter.notifyDataSetChanged()
        binding.trainingInfo.setOnClickListener {
            switchLich()
        }
        observeUserSummary()





        return binding.root
    }

    private fun createItemListHome(ds: List<Course>) {
        val list = createListWorkOut(ds)// t·∫°o ds cho list b√†i t·∫≠p
        setAdapter(list)

    }


    private fun observeUserSummary() {
        userSummaryViewModel.userSummary.observe(viewLifecycleOwner) { summary ->
            summary?.let {
                // üî• Khi c√≥ d·ªØ li·ªáu s·∫Ω t·ª± ƒë·ªông c·∫≠p nh·∫≠t giao di·ªán
                binding.txtCountTraining.text = "${it.trainingCount}\n L·∫¶N T·∫¨P"
                binding.txtKcal.text = "${it.kcalCount}\n KCAL"
                binding.txtTimeTraining.text = "${it.timeTraining}\n PH√öT"
            }
        }
    }
    private fun createListWorkOut(list: List<Course>) :MutableList<Course> {
        val ds = mutableListOf<Course>()
        list.forEach { course ->
            ds.add(
                Course(
                    course.name,
                    course.detail,
                    course.level,
                    course.totalTime,
                    course.img,
                    course.modules
                )
            )
        }

        return ds
    }

    private fun setAdapter(ds: List<Course>){
        twAdapter = WorkoutAdapter(ds, this@Home)
        binding.rvWorkLevel.apply {
            layoutManager = LinearLayoutManager(requireContext())
            adapter = twAdapter
        }

    }

    override fun onItemClick(position: Int) {
        switchCourseDetail()
    }

    private fun switchCourseDetail() {
        val intent = Intent(requireContext(), Courses::class.java)
        startActivity(intent)
    }

    private fun switchLich() {
        val transaction = parentFragmentManager.beginTransaction()
        transaction.replace(R.id.ltongKet, Report()) // ƒê·∫£m b·∫£o R.id.fragment_container ƒë√∫ng
        transaction.addToBackStack(null) // Cho ph√©p quay l·∫°i fragment tr∆∞·ªõc ƒë√≥
        transaction.commit()
    }

}
